// Fast Food Mobile-First Template - Interactive JavaScript

document.addEventListener('DOMContentLoaded', function() {
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');
    const navActions = document.querySelector('.nav-actions');
    const alertBanner = document.querySelector('.alert-banner');
    const alertClose = document.querySelector('.alert-close');
    
    // Mobile menu toggle
    if (hamburger) {
        hamburger.addEventListener('click', function() {
            navMenu.classList.toggle('active');
            navActions.classList.toggle('active');
            hamburger.classList.toggle('active');
            document.body.classList.toggle('menu-open');
        });
    }
    
    // Alert banner close
    if (alertClose) {
        alertClose.addEventListener('click', function() {
            alertBanner.style.transform = 'translateY(-100%)';
            alertBanner.style.transition = 'transform 0.3s ease';
            setTimeout(() => {
                alertBanner.style.display = 'none';
            }, 300);
        });
    }
    
    // Smooth scrolling for navigation links
    const navLinks = document.querySelectorAll('a[href^=\"#\"]');\n    navLinks.forEach(link => {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            const targetId = this.getAttribute('href').substring(1);\n            const targetElement = document.getElementById(targetId);\n            \n            if (targetElement) {\n                const navbar = document.querySelector('.navbar');\n                const alertHeight = alertBanner && alertBanner.style.display !== 'none' ? alertBanner.offsetHeight : 0;\n                const navHeight = navbar.offsetHeight + alertHeight;\n                const targetPosition = targetElement.offsetTop - navHeight;\n                \n                window.scrollTo({\n                    top: targetPosition,\n                    behavior: 'smooth'\n                });\n                \n                // Close mobile menu if open\n                navMenu.classList.remove('active');\n                navActions.classList.remove('active');\n                hamburger.classList.remove('active');\n                document.body.classList.remove('menu-open');\n            }\n        });\n    });\n    \n    // Order button interactions\n    const orderButtons = document.querySelectorAll('.btn-card, .btn-deal, .category-cta, .floating-btn');\n    orderButtons.forEach(button => {\n        button.addEventListener('click', function(e) {\n            if (this.getAttribute('href') === '#order') {\n                e.preventDefault();\n                showOrderModal();\n            }\n        });\n    });\n    \n    // App download tracking\n    const appButtons = document.querySelectorAll('.btn-app, .app-button, .footer-app-button');\n    appButtons.forEach(button => {\n        button.addEventListener('click', function(e) {\n            if (this.getAttribute('href') === '#download') {\n                e.preventDefault();\n                showNotification('App download would start here!', 'info');\n            }\n        });\n    });\n    \n    // Location finder\n    const locationForm = document.querySelector('.finder-form');\n    const locationInput = document.querySelector('.location-input');\n    const findButton = document.querySelector('.btn-find');\n    \n    if (locationForm) {\n        locationForm.addEventListener('submit', function(e) {\n            e.preventDefault();\n            const location = locationInput.value.trim();\n            if (location) {\n                showNotification(`Searching for locations near ${location}...`, 'info');\n                // Simulate search\n                setTimeout(() => {\n                    showNotification('Found 3 locations near you!', 'success');\n                }, 1500);\n            }\n        });\n    }\n    \n    // Product card animations\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    };\n    \n    const observer = new IntersectionObserver(function(entries) {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.style.opacity = '1';\n                entry.target.style.transform = 'translateY(0)';\n            }\n        });\n    }, observerOptions);\n    \n    // Animate product cards with staggered timing\n    const productCards = document.querySelectorAll('.product-card');\n    productCards.forEach((card, index) => {\n        card.style.opacity = '0';\n        card.style.transform = 'translateY(50px)';\n        card.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;\n        observer.observe(card);\n    });\n    \n    // Animate category items\n    const categoryItems = document.querySelectorAll('.category-item');\n    categoryItems.forEach((item, index) => {\n        item.style.opacity = '0';\n        item.style.transform = 'translateY(30px)';\n        item.style.transition = `opacity 0.5s ease ${index * 0.05}s, transform 0.5s ease ${index * 0.05}s`;\n        observer.observe(item);\n    });\n    \n    // Animate deal cards\n    const dealCards = document.querySelectorAll('.deal-card');\n    dealCards.forEach((card, index) => {\n        card.style.opacity = '0';\n        card.style.transform = 'translateY(30px)';\n        card.style.transition = `opacity 0.6s ease ${index * 0.15}s, transform 0.6s ease ${index * 0.15}s`;\n        observer.observe(card);\n    });\n    \n    // Floating order button hide/show on scroll\n    let lastScrollTop = 0;\n    const floatingOrder = document.querySelector('.floating-order');\n    \n    window.addEventListener('scroll', function() {\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        \n        if (scrollTop > lastScrollTop && scrollTop > 200) {\n            // Scrolling down\n            floatingOrder.style.transform = 'translateY(100px)';\n        } else {\n            // Scrolling up\n            floatingOrder.style.transform = 'translateY(0)';\n        }\n        \n        lastScrollTop = scrollTop;\n    });\n    \n    // Add pulse animation to featured cards\n    const featuredCards = document.querySelectorAll('.product-card.featured');\n    featuredCards.forEach(card => {\n        setInterval(() => {\n            card.style.transform = 'scale(1.02)';\n            setTimeout(() => {\n                card.style.transform = 'scale(1)';\n            }, 200);\n        }, 3000);\n    });\n    \n    // Breakfast time notice update\n    updateBreakfastNotice();\n    setInterval(updateBreakfastNotice, 60000); // Update every minute\n    \n    // Value price counter animation\n    animateValuePrices();\n});\n\n// Order Modal Simulation\nfunction showOrderModal() {\n    const modal = createModal(\n        'Quick Order',\n        `\n        <div class=\"order-options\">\n            <div class=\"order-option\">\n                <h4>üöö Delivery</h4>\n                <p>Get it delivered to your door</p>\n                <button class=\"btn btn-primary\" onclick=\"startOrder('delivery')\">Order Delivery</button>\n            </div>\n            <div class=\"order-option\">\n                <h4>üèÉ Pickup</h4>\n                <p>Order ahead and pick up</p>\n                <button class=\"btn btn-primary\" onclick=\"startOrder('pickup')\">Order Pickup</button>\n            </div>\n            <div class=\"order-option\">\n                <h4>üöó Drive-Thru</h4>\n                <p>Quick drive-thru service</p>\n                <button class=\"btn btn-primary\" onclick=\"startOrder('drivethru')\">Drive-Thru</button>\n            </div>\n        </div>\n        `,\n        () => {\n            document.getElementById('orderModal').remove();\n        }\n    );\n    \n    document.body.appendChild(modal);\n}\n\nfunction startOrder(type) {\n    document.getElementById('orderModal').remove();\n    showNotification(`Starting ${type} order! Redirecting to menu...`, 'success');\n    setTimeout(() => {\n        window.location.href = 'menu.html';\n    }, 1500);\n}\n\n// Notification System\nfunction showNotification(message, type = 'success') {\n    // Remove existing notifications\n    const existingNotifications = document.querySelectorAll('.notification');\n    existingNotifications.forEach(notification => notification.remove());\n    \n    // Create notification element\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.style.cssText = `\n        position: fixed;\n        top: 100px;\n        right: 20px;\n        background: ${getNotificationColor(type)};\n        color: white;\n        padding: 1rem 1.5rem;\n        border-radius: 25px;\n        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n        z-index: 3000;\n        transform: translateX(400px);\n        transition: transform 0.3s ease;\n        max-width: 300px;\n        font-size: 0.9rem;\n        font-weight: 600;\n        line-height: 1.4;\n    `;\n    \n    notification.textContent = message;\n    document.body.appendChild(notification);\n    \n    // Slide in\n    setTimeout(() => {\n        notification.style.transform = 'translateX(0)';\n    }, 100);\n    \n    // Auto remove after 4 seconds\n    setTimeout(() => {\n        notification.style.transform = 'translateX(400px)';\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.parentNode.removeChild(notification);\n            }\n        }, 300);\n    }, 4000);\n}\n\nfunction getNotificationColor(type) {\n    switch (type) {\n        case 'success':\n            return '#28a745';\n        case 'info':\n            return '#17a2b8';\n        case 'warning':\n            return '#ffc107';\n        case 'error':\n            return '#dc3545';\n        default:\n            return '#28a745';\n    }\n}\n\n// Modal Creation Helper\nfunction createModal(title, content, onClose) {\n    const modal = document.createElement('div');\n    modal.id = 'orderModal';\n    modal.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        backdrop-filter: blur(5px);\n        z-index: 2000;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 1rem;\n    `;\n    \n    modal.innerHTML = `\n        <div class=\"modal-content\" style=\"\n            background: white;\n            border-radius: 15px;\n            padding: 2rem;\n            max-width: 500px;\n            width: 100%;\n            position: relative;\n            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);\n        \">\n            <div class=\"modal-header\" style=\"\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 1.5rem;\n                border-bottom: 1px solid #e2e8f0;\n                padding-bottom: 1rem;\n            \">\n                <h3 style=\"margin: 0; font-size: 1.5rem; color: #333;\">${title}</h3>\n                <button class=\"modal-close\" style=\"\n                    background: none;\n                    border: none;\n                    font-size: 2rem;\n                    cursor: pointer;\n                    color: #666;\n                    padding: 0;\n                    width: 30px;\n                    height: 30px;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                \">&times;</button>\n            </div>\n            ${content}\n        </div>\n    `;\n    \n    // Close modal events\n    modal.addEventListener('click', function(e) {\n        if (e.target === modal) {\n            onClose();\n        }\n    });\n    \n    modal.querySelector('.modal-close').addEventListener('click', onClose);\n    \n    // Add modal-specific styles\n    const style = document.createElement('style');\n    style.textContent = `\n        .order-options {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n        \n        .order-option {\n            border: 2px solid #e2e8f0;\n            border-radius: 10px;\n            padding: 1.5rem;\n            text-align: center;\n            transition: border-color 0.3s ease;\n        }\n        \n        .order-option:hover {\n            border-color: #ffcc00;\n        }\n        \n        .order-option h4 {\n            margin-bottom: 0.5rem;\n            color: #333;\n        }\n        \n        .order-option p {\n            margin-bottom: 1rem;\n            color: #666;\n            font-size: 0.9rem;\n        }\n        \n        @media (max-width: 480px) {\n            .modal-content {\n                margin: 1rem;\n                padding: 1rem !important;\n            }\n        }\n    `;\n    \n    document.head.appendChild(style);\n    \n    return modal;\n}\n\n// Breakfast Notice Update\nfunction updateBreakfastNotice() {\n    const timeNotices = document.querySelectorAll('.time-notice');\n    const now = new Date();\n    const currentTime = now.getHours() * 100 + now.getMinutes(); // Format: HHMM\n    const breakfastEndTime = 1100; // 11:00 AM\n    \n    timeNotices.forEach(notice => {\n        if (currentTime > breakfastEndTime) {\n            notice.style.background = '#f8d7da';\n            notice.style.color = '#721c24';\n            notice.textContent = 'Breakfast service has ended for today';\n        } else {\n            const timeLeft = breakfastEndTime - currentTime;\n            const hoursLeft = Math.floor(timeLeft / 100);\n            const minutesLeft = timeLeft % 100;\n            \n            if (hoursLeft > 0) {\n                notice.textContent = `Breakfast available for ${hoursLeft}h ${minutesLeft}m more`;\n            } else {\n                notice.textContent = `Breakfast available for ${minutesLeft} more minutes`;\n            }\n        }\n    });\n}\n\n// Value Price Animation\nfunction animateValuePrices() {\n    const valuePrices = document.querySelectorAll('.value-price');\n    \n    valuePrices.forEach(price => {\n        const finalValue = price.textContent;\n        const numericValue = parseFloat(finalValue.replace(/[^\\d.]/g, ''));\n        \n        if (numericValue) {\n            let currentValue = 0;\n            const increment = numericValue / 30; // 30 steps\n            const currency = finalValue.match(/[^\\d.]/g)?.join('') || '$';\n            \n            price.textContent = currency + '0.00';\n            \n            const timer = setInterval(() => {\n                currentValue += increment;\n                if (currentValue >= numericValue) {\n                    price.textContent = finalValue;\n                    clearInterval(timer);\n                } else {\n                    price.textContent = currency + currentValue.toFixed(2);\n                }\n            }, 50);\n        }\n    });\n}\n\n// Mobile menu styles\nconst mobileMenuStyles = `\n    @media (max-width: 768px) {\n        .nav-menu.active,\n        .nav-actions.active {\n            display: flex;\n            position: fixed;\n            top: 120px;\n            left: 0;\n            right: 0;\n            background: #ffffff;\n            flex-direction: column;\n            padding: 2rem;\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n            z-index: 999;\n        }\n        \n        .nav-menu.active {\n            gap: 1.5rem;\n        }\n        \n        .nav-actions.active {\n            gap: 1rem;\n            margin-top: 1rem;\n            border-top: 1px solid #e2e8f0;\n            padding-top: 1rem;\n        }\n        \n        .hamburger.active span:nth-child(1) {\n            transform: rotate(45deg) translate(5px, 5px);\n        }\n        \n        .hamburger.active span:nth-child(2) {\n            opacity: 0;\n        }\n        \n        .hamburger.active span:nth-child(3) {\n            transform: rotate(-45deg) translate(7px, -6px);\n        }\n        \n        body.menu-open {\n            overflow: hidden;\n        }\n        \n        body.menu-open::before {\n            content: '';\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.5);\n            z-index: 998;\n        }\n    }\n`;\n\n// Inject mobile menu styles\nconst style = document.createElement('style');\nstyle.textContent = mobileMenuStyles;\ndocument.head.appendChild(style);"